{"version":3,"sources":["Common/Components/PlaceholderImage/placeholderCharacter.png","Common/Components/PlaceholderImage/placeholderSpaceship.png","Common/Components/Loading/icon.gif","Layout/AnimatedBackground/stars.jpg","Common/Images/logo_small.png","Layout/AnimatedBackground/planet.png","Common/Components/PlaceholderImage/placeholderPlanet.png","Layout/Entry/holocron.png","Common/Components/Loading/Loading.jsx","Layout/AnimatedBackground/AnimatedBackground.jsx","Common/Components/TabWindow/TabWindow.jsx","Layout/SlidingContainer/SlidingContainer.jsx","Common/Services/Swapi/settings.jsx","Common/Services/Swapi/Common.js","Common/Services/Swapi/Resources/People.jsx","Common/Services/Swapi/Resources/Films.jsx","Common/Services/Swapi/Resources/Planets.jsx","Common/Services/Swapi/Resources/Vehicles.jsx","Common/Services/Swapi/Resources/Starships.jsx","Common/Services/Swapi/Resources/Species.jsx","Common/Services/Swapi/Swapi.jsx","Common/Services/Swapi/index.js","Common/Components/PlaceholderImage/PlaceholderImage.jsx","Layout/EntriesMenu/EntriesMenu.jsx","Common/Components/EntryDataTable/EntryDataTable.jsx","Pages/Character/Character.jsx","Pages/Planet/Planet.jsx","Pages/Vehicles/Vehicle.jsx","Pages/Starships/Starship.jsx","Pages/Species/Species.jsx","Layout/Entry/Entry.jsx","Layout/Quotes/QuotesList.js","Layout/Quotes/Quotes.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Loading","loading","useState","animationState","setAnimationState","disabled","setDisabled","useEffect","setTimeout","className","src","icon","alt","defaultProps","AnimatedBackground","animate","stars","planet","logo","TabWindow","children","style","buttons","length","map","button","index","key","onClick","href","url","label","SlidingContainer","slideType","classes","opened","join","SlideTypes","requestTypes","requestConfig","people","type","labelFieldName","urlFieldName","imgFieldName","films","starships","vehicles","species","planets","agent","https","Agent","rejectUnauthorized","Common","GetResourcesList","page","finishEvent","axios","request","method","responseType","params","httpsAgent","then","response","data","catch","error","GetResource","urls","finishFunction","FillFunction","Array","isArray","all","urlEntry","spread","responses","errors","FillData","content","Swapi","Vehicles","GetByUrl","entry","Starships","Species","Planets","homeworld","People","customUrl","fillData","GetAll","MainURL","Films","residents","pilots","character","GetByTypeUrl","finishAction","GetListByType","PlaceholderImage","requestType","undefined","placeholderCharacter","placeholderPlanet","placeholderSpaceship","EntriesMenu","contentList","onEntryClick","entriesListLoadingFunction","pages","count","Math","ceil","currentPage","firstAvailable","lastAvailable","availablePages","i","push","pagination","results","img","size","EntryDataTable","header","rows","smallSize","row","cells","renderImage","image","informations","information","value","Character","loadEntryFunction","personalDataRow","name","gender","birth_year","hair_color","mass","homeworldDataRow","vehiclesDataRow","vehicle","starshipsDataRow","starship","speciesDataRow","Planet","diameter","gravity","orbital_period","rotation_period","climate","terrain","surface_water","population","residentsDataRow","resident","Vehicle","manufacturer","model","vehicle_class","crew","passengers","cargo_capacity","max_atmosphering_speed","consumables","cost_in_credits","pilotsDataRow","pilot","Starship","starship_class","hyperdrive_rating","classification","designation","language","average_height","average_lifespan","eye_colors","hair_colors","skin_colors","peopleDataRow","Entry","HolocronImage","componentToRender","QuotesList","quote","author","Quotes","floor","random","App","initialLoading","setInitialLoading","entriesMenuLoading","setEntriesMenuLoading","contentLoading","setContentLoading","setContentList","setContent","LoadEntriesList","pageNumber","ApplyContent","loadEntry","width","marginTop","height","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.cd9c899b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/placeholderCharacter.5f909bb0.png\";","module.exports = __webpack_public_path__ + \"static/media/placeholderSpaceship.3c0180bd.png\";","module.exports = __webpack_public_path__ + \"static/media/icon.5366247d.gif\";","module.exports = __webpack_public_path__ + \"static/media/stars.511c5034.jpg\";","module.exports = __webpack_public_path__ + \"static/media/logo_small.9f9cc56f.png\";","module.exports = __webpack_public_path__ + \"static/media/planet.423bb5af.png\";","module.exports = __webpack_public_path__ + \"static/media/placeholderPlanet.9cc31679.png\";","module.exports = __webpack_public_path__ + \"static/media/holocron.79e78bde.png\";","import React, {useEffect, useState} from 'react';\nimport icon from \"./icon.gif\"\nimport \"./style.scss\"\nimport PropTypes from 'prop-types';\n\nconst Loading = ({loading}) => {\n\n    const [animationState, setAnimationState] = useState(\"\");\n    const [disabled, setDisabled] = useState(!loading);\n\n    useEffect(() => {\n        if (loading === true) {\n            setAnimationState(\" Loading-Wrapper-FadeInAnimation\");\n            setDisabled(false)\n        }\n        else {\n            setAnimationState(\" Loading-Wrapper-FadeOutAnimation\");\n            setTimeout(() => {\n                setDisabled(true)\n            }, 200);\n        }\n    }, [loading]);\n\n    if (!disabled){\n        return (\n            <div className={\"Loading-Wrapper\" + animationState}>\n                <div className={\"Loading-Container\"}>\n                    <img src={icon} alt={\"Loading icon\"}/>\n                    <p>May the loading be with You ...</p>\n                </div>\n            </div>\n        );\n    } else\n        return null;\n}\n\nLoading.propTypes = {\n    loading: PropTypes.bool,\n};\nLoading.defaultProps = {\n    loading: false,\n};\n\nexport default Loading;\n","import React from 'react';\nimport \"./style.scss\"\nimport stars from \"./stars.jpg\"\nimport logo from \"../../Common/Images/logo_small.png\"\nimport planet from \"./planet.png\"\nimport PropTypes from \"prop-types\";\n\nconst AnimatedBackground = ({animate}) => {\n\n    return (\n      <div className={\"AnimatedBackground-Wrapper\" + (animate?\" AnimatedBackground-Wrapper-Animate\":\"\")}>\n        <img className=\"AnimatedBackground-FarPlane\" src={stars} alt={\"Stars\"}/>\n        <img className=\"AnimatedBackground-NearPlane\" src={planet} alt={\"Planet\"}/>\n        <img className=\"AnimatedBackground-Logo\" src={logo} alt={\"Star Wars logo\"}/>\n    </div>\n    );\n}\n\n\nAnimatedBackground.propTypes = {\n    animate: PropTypes.bool,\n};\n\nAnimatedBackground.defaultProps = {\n    animate: false,\n};\n\nexport default AnimatedBackground;\n","import React from 'react';\nimport \"./style.scss\"\nimport PropTypes from 'prop-types';\n\nconst TabWindow = ({children, style, buttons}) => {\n    return (\n        <div className={\"TabWindow\"} style={style}>\n            {buttons.length > 0 ?\n                <ul className={\"TabWindow-Buttons\"}>\n                    {buttons.map((button, index)=>{\n                        return <li key={index} onClick={button.onClick}><a href={button.url}>{button.label}</a></li>;\n                    })}\n                </ul>\n                : \"\"}\n\n\n            <div className={\"TabWindow-Container\" + (buttons.length > 0?\"\":\" TabWindow-Container-NoButtons\")}>\n                {children}\n            </div>\n        </div>\n    );\n}\n\nTabWindow.propTypes = {\n    buttons: PropTypes.arrayOf(\n        PropTypes.shape({\n            label: PropTypes.string,\n            url: PropTypes.string,\n            onClick: PropTypes.func,\n        })\n    )\n};\nTabWindow.defaultProps = {\n    buttons: []\n};\n\nexport default TabWindow;\n","import React from 'react';\nimport \"./style.scss\"\nimport PropTypes from \"prop-types\";\n\nconst SlidingContainer = ({children, style, slideType, opened}) => {\n    let classes = [\n        \"SlidingContainer\",\n        \"SlidingContainer-\" + slideType\n    ];\n    if (opened)\n        classes = [...classes, \"SlidingContainer-\" + slideType + \"-Opened\"];\n\n    return (\n      <div className={classes.join(\" \")} style={style}>\n          {children}\n    </div>\n    );\n}\n\nconst SlideTypes = {\n    FromLeft: \"FromLeft\",\n    FromRight: \"FromRight\"\n};\n\n\nSlidingContainer.propTypes = {\n    slideType: PropTypes.oneOf([SlideTypes.FromLeft, SlideTypes.FromRight]),\n    opened: PropTypes.bool,\n};\n\nSlidingContainer.defaultProps = {\n    slideType: SlideTypes.FromLeft,\n    opened: false\n};\n\nexport default SlidingContainer;\nexport {SlideTypes};\n","const url = \"https://swapi.dev/api/\";\r\n//const url = \"http://localhost:8000/api/\";\r\n\r\nconst requestTypes = {\r\n    people: \"people\",\r\n    films: \"films\",\r\n    starships: \"starships\",\r\n    vehicles: \"vehicles\",\r\n    species: \"species\",\r\n    planets: \"planets\",\r\n};\r\n\r\nconst requestConfig = {\r\n    people: {\r\n        type: requestTypes.people,\r\n        labelFieldName: \"name\",\r\n        urlFieldName: \"url\",\r\n        imgFieldName: \"img\",\r\n    },\r\n    films: {\r\n        type: requestTypes.films,\r\n        labelFieldName: \"name\",\r\n        urlFieldName: \"url\",\r\n        imgFieldName: \"img\",\r\n    },\r\n    starships: {\r\n        type: requestTypes.starships,\r\n        labelFieldName: \"name\",\r\n        urlFieldName: \"url\",\r\n        imgFieldName: \"img\",\r\n    },\r\n    vehicles: {\r\n        type: requestTypes.vehicles,\r\n        labelFieldName: \"name\",\r\n        urlFieldName: \"url\",\r\n        imgFieldName: \"img\",\r\n    },\r\n    species: {\r\n        type: requestTypes.species,\r\n        labelFieldName: \"name\",\r\n        urlFieldName: \"url\",\r\n        imgFieldName: \"img\",\r\n    },\r\n    planets: {\r\n        type: requestTypes.planets,\r\n        labelFieldName: \"name\",\r\n        urlFieldName: \"url\",\r\n        imgFieldName: \"img\",\r\n    },\r\n};\r\n\r\nexport { url, requestConfig, requestTypes };","import axios from \"axios\";\r\nimport https from \"https\";\r\n\r\nconst agent = new https.Agent({\r\n    rejectUnauthorized: false\r\n});\r\n\r\nconst GetResourcesList= (url, page, finishEvent, requestConfig) => {\r\n    axios.request({\r\n        url: url,\r\n        method: 'get',\r\n        responseType: 'json',\r\n        params: {\r\n            page: page\r\n        },\r\n        httpsAgent: agent\r\n    })\r\n    .then(function (response) {\r\n        finishEvent({...response.data, requestConfig: requestConfig});\r\n    })\r\n    .catch(function (error) {\r\n        finishEvent({...error, requestConfig: requestConfig});\r\n    });\r\n};\r\n\r\nconst GetResource= (urls, finishFunction, requestConfig, FillFunction = null) => {\r\n    if (Array.isArray(urls)){\r\n        axios.all(urls.map((urlEntry)=>{\r\n            return axios.request({\r\n                url: urlEntry,\r\n                method: 'get',\r\n                responseType: 'json',\r\n                httpsAgent: agent\r\n            })\r\n        })).then(axios.spread((...responses) => {\r\n            finishFunction(responses.map((response)=>{return {...response.data, requestConfig: requestConfig};}));\r\n        })).catch(errors => {\r\n\r\n        })\r\n    } else {\r\n        axios.request({\r\n            url: urls,\r\n            method: 'get',\r\n            responseType: 'json',\r\n        })\r\n        .then(function (response) {\r\n            response.data = {...response.data, requestConfig: requestConfig}\r\n            if (typeof FillFunction === \"function\")\r\n                FillFunction(response.data, finishFunction);\r\n            else\r\n                finishFunction(response.data);\r\n        })\r\n        .catch(function (error) {\r\n\r\n        });\r\n    }\r\n};\r\n\r\n\r\nconst Common = {\r\n    GetResourcesList: GetResourcesList,\r\n    GetResource: GetResource,\r\n};\r\n\r\nexport default Common;","import {url as MainURL, requestConfig} from \"../settings\"\r\nimport Common from \"../Common\";\r\nimport Swapi from \"../Swapi\";\r\n\r\nconst url = MainURL + \"people/\"\r\n\r\nconst GetAll = (page, finishEvent) => {\r\n    Common.GetResourcesList(url, page, finishEvent, requestConfig.people);\r\n};\r\n\r\nconst GetByUrl = (customUrl, finishEvent, fillData = false) => {\r\n    if (fillData)\r\n        Common.GetResource(customUrl, finishEvent, requestConfig.people, FillData);\r\n    else\r\n        Common.GetResource(customUrl, finishEvent, requestConfig.people);\r\n};\r\n\r\nconst FillData = (content, finishEvent) => {\r\n    Swapi.Vehicles.GetByUrl(content.vehicles, (data)=> {\r\n        content.vehicles = data.map((entry)=>{return {\r\n            label:entry[requestConfig.vehicles.labelFieldName],\r\n            url:entry[requestConfig.vehicles.urlFieldName]\r\n        };});\r\n        finishEvent({...content});\r\n    });\r\n    Swapi.Starships.GetByUrl(content.starships, (data)=> {\r\n        content.starships = data.map((entry)=>{return {\r\n            label:entry[requestConfig.starships.labelFieldName],\r\n            url:entry[requestConfig.starships.urlFieldName]\r\n        };});\r\n        finishEvent({...content});\r\n    });\r\n    Swapi.Species.GetByUrl(content.species, (data)=> {\r\n        content.species = data.map((entry)=>{return {\r\n            label:entry[requestConfig.species.labelFieldName],\r\n            url:entry[requestConfig.species.urlFieldName]\r\n        };});\r\n        finishEvent({...content});\r\n    });\r\n    Swapi.Planets.GetByUrl(content.homeworld, (data) => {\r\n        content.homeworld = {\r\n            label:data[requestConfig.planets.labelFieldName],\r\n            url:data[requestConfig.planets.urlFieldName]\r\n        };\r\n        finishEvent({...content});\r\n    });\r\n}\r\n\r\n\r\nconst People = {\r\n    GetByUrl: GetByUrl,\r\n    GetAll: GetAll,\r\n};\r\n\r\nexport default People;","import {url as MainURL, requestConfig} from \"../settings\"\r\nimport Common from \"../Common\";\r\n\r\nconst url = MainURL + \"films/\"\r\n\r\nconst GetAll = (page, finishEvent) => {\r\n    Common.GetResourcesList(url, page, finishEvent, requestConfig.films);\r\n};\r\n\r\nconst GetByUrl = (customUrl, finishEvent, fillData = false) => {\r\n    if (fillData)\r\n        Common.GetResource(customUrl, finishEvent, requestConfig.films, FillData);\r\n    else\r\n        Common.GetResource(customUrl, finishEvent, requestConfig.films);\r\n};\r\n\r\nconst FillData = (content, finishEvent) => {\r\n    finishEvent(content);\r\n}\r\n\r\nconst Films = {\r\n    GetByUrl: GetByUrl,\r\n    GetAll: GetAll,\r\n};\r\n\r\nexport default Films;","import {url as MainURL, requestConfig} from \"../settings\"\r\nimport Common from \"../Common\";\r\nimport Swapi from \"../Swapi\";\r\n\r\nconst url = MainURL + \"planets/\"\r\n\r\nconst GetAll = (page, finishEvent) => {\r\n    Common.GetResourcesList(url, page, finishEvent, requestConfig.planets);\r\n};\r\n\r\nconst GetByUrl = (customUrl, finishEvent, fillData = false) => {\r\n    if (fillData)\r\n        Common.GetResource(customUrl, finishEvent, requestConfig.planets, FillData);\r\n    else\r\n        Common.GetResource(customUrl, finishEvent, requestConfig.planets);\r\n};\r\n\r\nconst FillData = (content, finishEvent) => {\r\n    Swapi.People.GetByUrl(content.residents, (data)=> {\r\n        content.residents = data.map((entry)=>{return {\r\n            label:entry[requestConfig.people.labelFieldName],\r\n            url:entry[requestConfig.people.urlFieldName]\r\n        };});\r\n        finishEvent({...content});\r\n    });\r\n}\r\n\r\nconst Planets = {\r\n    GetByUrl: GetByUrl,\r\n    GetAll: GetAll,\r\n};\r\n\r\nexport default Planets;","import {url as MainURL, requestConfig} from \"../settings\"\r\nimport Common from \"../Common\";\r\nimport Swapi from \"../Swapi\";\r\n\r\nconst url = MainURL + \"vehicles/\"\r\n\r\nconst GetAll = (page, finishEvent) => {\r\n    Common.GetResourcesList(url, page, finishEvent, requestConfig.vehicles);\r\n};\r\n\r\nconst GetByUrl = (customUrl, finishEvent, fillData = false) => {\r\n    if (fillData)\r\n        Common.GetResource(customUrl, finishEvent, requestConfig.vehicles, FillData);\r\n    else\r\n        Common.GetResource(customUrl, finishEvent, requestConfig.vehicles);\r\n};\r\n\r\nconst FillData = (content, finishEvent) => {\r\n    Swapi.People.GetByUrl(content.pilots, (data)=> {\r\n        content.pilots = data.map((entry)=>{return {\r\n            label:entry[requestConfig.people.labelFieldName],\r\n            url:entry[requestConfig.people.urlFieldName]\r\n        };});\r\n        finishEvent(content);\r\n    });\r\n}\r\n\r\nconst Vehicles = {\r\n    GetByUrl: GetByUrl,\r\n    GetAll: GetAll,\r\n};\r\n\r\nexport default Vehicles;","import {url as MainURL, requestConfig} from \"../settings\"\r\nimport Common from \"../Common\";\r\nimport Swapi from \"../Swapi\";\r\n\r\nconst url = MainURL + \"starships/\"\r\n\r\nconst GetAll = (page, finishEvent) => {\r\n    Common.GetResourcesList(url, page, finishEvent, requestConfig.starships);\r\n};\r\n\r\nconst GetByUrl = (customUrl, finishEvent, fillData = false) => {\r\n    if (fillData)\r\n        Common.GetResource(customUrl, finishEvent, requestConfig.starships, FillData);\r\n    else\r\n        Common.GetResource(customUrl, finishEvent, requestConfig.starships);\r\n};\r\n\r\nconst FillData = (content, finishEvent) => {\r\n    Swapi.People.GetByUrl(content.pilots, (data)=> {\r\n        content.pilots = data.map((entry)=>{return {\r\n            label:entry[requestConfig.people.labelFieldName],\r\n            url:entry[requestConfig.people.urlFieldName]\r\n        };});\r\n        finishEvent(content);\r\n    });\r\n}\r\n\r\nconst Planets = {\r\n    GetByUrl: GetByUrl,\r\n    GetAll: GetAll,\r\n};\r\n\r\nexport default Planets;","import {url as MainURL, requestConfig} from \"../settings\"\r\nimport Common from \"../Common\";\r\nimport Swapi from \"../Swapi\";\r\n\r\nconst url = MainURL + \"species/\"\r\n\r\nconst GetAll = (page, finishEvent) => {\r\n    Common.GetResourcesList(url, page, finishEvent, requestConfig.species);\r\n};\r\n\r\nconst GetByUrl = (customUrl, finishEvent, fillData = false) => {\r\n    if (fillData)\r\n        Common.GetResource(customUrl, finishEvent, requestConfig.species, FillData);\r\n    else\r\n        Common.GetResource(customUrl, finishEvent, requestConfig.species);\r\n};\r\n\r\nconst FillData = (content, finishEvent) => {\r\n    Swapi.People.GetByUrl(content.people, (character)=> {\r\n        content.people = character.map((entry)=>{return {\r\n            label:entry[requestConfig.people.labelFieldName],\r\n            url:entry[requestConfig.people.urlFieldName]\r\n        };});\r\n        finishEvent(content);\r\n    });\r\n    Swapi.Planets.GetByUrl(content.homeworld, (data) => {\r\n        content.homeworld = {\r\n            label:data[requestConfig.planets.labelFieldName],\r\n            url:data[requestConfig.planets.urlFieldName]\r\n        };\r\n        finishEvent({...content});\r\n    });\r\n}\r\n\r\nconst Species = {\r\n    GetByUrl: GetByUrl,\r\n    GetAll: GetAll,\r\n};\r\n\r\nexport default Species;","import People from \"./Resources/People\";\r\nimport Films from \"./Resources/Films\";\r\nimport Planets from \"./Resources/Planets\";\r\nimport Vehicles from \"./Resources/Vehicles\";\r\nimport Starships from \"./Resources/Starships\";\r\nimport Species from \"./Resources/Species\";\r\nimport {requestTypes} from \"./settings\";\r\n\r\nconst GetByTypeUrl = (type, url, finishAction, fillData = false) => {\r\n    switch (type) {\r\n        case requestTypes.people:\r\n            People.GetByUrl(url, finishAction, fillData);\r\n            return;\r\n        case requestTypes.films:\r\n            Films.GetByUrl(url, finishAction, fillData);\r\n            return;\r\n        case requestTypes.planets:\r\n            Planets.GetByUrl(url, finishAction, fillData);\r\n            return;\r\n        case requestTypes.vehicles:\r\n            Vehicles.GetByUrl(url, finishAction, fillData);\r\n            return;\r\n        case requestTypes.starships:\r\n            Starships.GetByUrl(url, finishAction, fillData);\r\n            return;\r\n        case requestTypes.species:\r\n            Species.GetByUrl(url, finishAction, fillData);\r\n            return;\r\n        default:\r\n            finishAction(null);\r\n            return;\r\n    }\r\n};\r\nconst GetListByType = (type, page, finishAction) => {\r\n    switch (type) {\r\n        case requestTypes.people:\r\n            People.GetAll(page, finishAction);\r\n            return;\r\n        case requestTypes.films:\r\n            Films.GetAll(page, finishAction);\r\n            return;\r\n        case requestTypes.planets:\r\n            Planets.GetAll(page, finishAction);\r\n            return;\r\n        case requestTypes.vehicles:\r\n            Vehicles.GetAll(page, finishAction);\r\n            return;\r\n        case requestTypes.starships:\r\n            Starships.GetAll(page, finishAction);\r\n            return;\r\n        case requestTypes.species:\r\n            Species.GetAll(page, finishAction);\r\n            return;\r\n        default:\r\n            finishAction(null);\r\n            return;\r\n    }\r\n};\r\n\r\nconst Swapi = {\r\n    People: People,\r\n    Films: Films,\r\n    Planets: Planets,\r\n    Vehicles: Vehicles,\r\n    Starships: Starships,\r\n    Species: Species,\r\n    GetByTypeUrl: GetByTypeUrl,\r\n    GetListByType: GetListByType,\r\n};\r\n\r\nexport default Swapi;","import Swapi from \"./Swapi\";\r\nimport People from \"./Resources/People\";\r\n\r\nexport default Swapi;\r\nexport {People};","import React from 'react';\nimport \"./style.scss\"\nimport PropTypes from 'prop-types';\nimport placeholderCharacter from './placeholderCharacter.png';\nimport placeholderPlanet from './placeholderPlanet.png';\nimport placeholderSpaceship from './placeholderSpaceship.png';\nimport {requestTypes} from \"../../Services/Swapi/settings\";\n\nconst PlaceholderImage = ({requestType, src, style, className}) => {\n    if (src === null || src === undefined){\n        switch (requestType) {\n            case requestTypes.people:\n                return <img className={\"PlaceholderImage \" + className} src={placeholderCharacter} style={style} alt={\"Character placeholder\"}/>\n            case requestTypes.planets:\n                return <img className={\"PlaceholderImage \" + className} src={placeholderPlanet} style={style} alt={\"Planet placeholder\"}/>\n            case requestTypes.starships:\n                return <img className={\"PlaceholderImage \" + className} src={placeholderSpaceship} style={style} alt={\"Spaceship placeholder\"}/>\n            case requestTypes.vehicles:\n                return <img className={\"PlaceholderImage \" + className} src={placeholderSpaceship} style={style} alt={\"Vehicle placeholder\"}/>\n            default:\n                return <img className={\"PlaceholderImage \" + className} src={placeholderCharacter} style={style} alt={\"Default placeholder\"}/>\n        }\n    }\n    return (\n        <img className={\"PlaceholderImage \" + className}  alt={\"Data representation\"}/>\n    );\n}\n\nPlaceholderImage.propTypes = {\n    requestType: PropTypes.oneOf(Object.values(requestTypes)),\n    src: PropTypes.string,\n};\nPlaceholderImage.defaultProps = {\n};\n\nexport default PlaceholderImage;\n","import React from 'react';\nimport \"./style.scss\"\nimport PropTypes from 'prop-types';\nimport PlaceholderImage from \"../../Common/Components/PlaceholderImage/PlaceholderImage\";\n\nconst EntriesMenu = ({contentList, onEntryClick, style, entriesListLoadingFunction}) => {\n\n    const pages = contentList.count ? Math.ceil(contentList.count / 10) : 1;\n    const currentPage = contentList.page ? contentList.page : 1;\n    let firstAvailable = currentPage - 2 < 1 ? 1 : currentPage - 2;\n    const lastAvailable = firstAvailable + 5 > pages ? pages : firstAvailable + 5;\n    firstAvailable = lastAvailable - 5 < 1 ? 1 : lastAvailable - 5;\n    let availablePages = [];\n    for (let i = firstAvailable; i <= lastAvailable; i++){\n        availablePages.push(\n            <li\n                className={currentPage === i?\"EntriesMenu-Pagination-Current\":\"\"}\n                onClick={\n                    currentPage !== i?\n                        ()=>{entriesListLoadingFunction(contentList.requestConfig.type, i)}\n                        :null}\n                key={i}>\n                {i}\n            </li>);\n    }\n    const pagination = (\n        <ul className={\"EntriesMenu-Pagination\"}>\n            {firstAvailable !== 1?<li onClick={()=>{entriesListLoadingFunction(contentList.requestConfig.type, 1)}}>1...</li>:null}\n            {availablePages}\n            {lastAvailable !== pages?<li onClick={()=>{entriesListLoadingFunction(contentList.requestConfig.type, pages)}}>...{pages}</li>:null}\n        </ul>\n    );\n\n\n    return (\n        <div className={\"EntriesMenu-Wrapper\"} style={style}>\n            <ul className={\"EntriesMenu\"}>\n                {contentList !== undefined && contentList.results !== undefined ? contentList.results.map((entry, index)=>{\n                    let img = null;\n                    if (entry[contentList.requestConfig.imgFieldName] !== null && entry[contentList.requestConfig.imgFieldName] !== undefined){\n                        img = entry[contentList.requestConfig.imgFieldName];\n                    }\n                    return (\n                        <li\n                            key={index}\n                            onClick={()=>{onEntryClick(\n                                contentList.requestConfig.type,\n                                entry[contentList.requestConfig.urlFieldName],\n                            )}}\n                        >\n                            <PlaceholderImage className={\"EntriesMenu-Image\"} src={img} requestType={contentList.requestConfig.type} size={\"small\"}/>\n                            {entry[contentList.requestConfig.labelFieldName]}\n                        </li>\n                    )\n                }):\"No data available.\"}\n            </ul>\n            {pagination}\n        </div>\n    );\n}\n\nEntriesMenu.propTypes = {\n    contentList: PropTypes.object,\n    onEntryClick: PropTypes.func,\n    entriesListLoadingFunction: PropTypes.func\n};\nEntriesMenu.defaultProps = {\n    contentList: {}\n};\n\nexport default EntriesMenu;\n","import React from 'react';\nimport \"./style.scss\"\nimport PropTypes from 'prop-types';\nimport PlaceholderImage from \"../PlaceholderImage/PlaceholderImage\";\n\nconst EntryDataTable = ({header, rows, smallSize}) => {\n    return (\n        <div className={\"EntryDataTable-Container\" + (smallSize?\" EntryDataTable-Container-Small\":\"\")}>\n            <h3 className={\"EntryDataTable-Container-Title\"}>\n                {header}\n            </h3>\n                {\n                    rows.map((row, index)=>{\n                        let cells = [];\n                        if (row.renderImage){\n                            cells.push(\n                                <div key={\"Image\"} className={\"EntryDataTable-Container-Row-Image\"}>\n                                    <PlaceholderImage src={row.image} requestType={row.requestType}/>\n                                </div>\n                            );\n                        }\n                        if (row.informations !== null && row.informations !== undefined){\n                            cells.push(\n                                <ul key={\"Informations\"} className={\"EntryDataTable-Container-Row-Informations\"}>\n                                    {row.informations.map((information, index)=>{\n                                        if (information.key === null || information.key === undefined)\n                                            return <li key={index}>{information.value}</li>;\n                                        return <li key={index}>{information.key}: {information.value}</li>;\n                                    })}\n                                </ul>\n                            );\n                        }\n                        if (typeof row.onClick == 'function')\n                            return <div\n                                className={\"EntryDataTable-Container-Row EntryDataTable-Container-Row-Clickable\"}\n                                onClick={row.onClick}\n                                key={index}\n                            >{cells}</div>;\n                        return <div className={\"EntryDataTable-Container-Row\"} key={index}>{cells}</div>;\n                    })\n                }\n        </div>\n    );\n}\n\nEntryDataTable.propTypes = {\n    header: PropTypes.string,\n    rows: PropTypes.array,\n    smallSize: PropTypes.bool\n};\nEntryDataTable.defaultProps = {\n    smallSize: false\n};\n\nexport default EntryDataTable;\n","import React from 'react';\nimport \"./style.scss\"\nimport PropTypes from 'prop-types';\nimport {requestTypes} from \"../../Common/Services/Swapi/settings\";\nimport EntryDataTable from \"../../Common/Components/EntryDataTable/EntryDataTable\";\n\nconst Character = ({content, loadEntryFunction}) => {\n    const personalDataRow = [\n        {\n            requestType: requestTypes.people,\n            renderImage: true,\n            image: content.img,\n            informations: [\n                {key: \"Name\", value: content.name},\n                {key: \"Gender\", value: content.gender},\n                {key: \"Birth\", value: content.birth_year},\n                {key: \"Hair\", value: content.hair_color},\n                {key: \"Mass\", value: content.mass},\n                ]\n        }\n    ];\n    const homeworldDataRow = [\n        {\n            requestType: requestTypes.planets,\n            renderImage: true,\n            image: content.homeworld.img,\n            informations: [\n                {value: content.homeworld.label}\n            ],\n            onClick: () => {loadEntryFunction(requestTypes.planets, content.homeworld.url);}\n        }\n    ];\n    const vehiclesDataRow = content.vehicles.map((vehicle)=>{\n        if(typeof vehicle == 'string'){ return {}; }\n        return {\n            requestType: requestTypes.vehicles,\n            renderImage: true,\n            image: vehicle.img,\n            informations: [\n                {value: vehicle.label}\n            ],\n            onClick: () => {loadEntryFunction(requestTypes.vehicles, vehicle.url);}\n        };\n    });\n    const starshipsDataRow = content.starships.map((starship)=>{\n        if(typeof starship == 'string'){ return {}; }\n        return {\n            requestType: requestTypes.starships,\n            renderImage: true,\n            image: starship.img,\n            informations: [\n                {value: starship.label}\n            ],\n            onClick: () => {loadEntryFunction(requestTypes.starships, starship.url);}\n        };\n    });\n    const speciesDataRow = content.species.map((data)=>{\n        if(typeof data == 'string'){ return {}; }\n        return {\n            requestType: requestTypes.species,\n            renderImage: false,\n            image: data.img,\n            informations: [\n                {value: data.label}\n            ],\n            onClick: () => {loadEntryFunction(requestTypes.species, data.url);}\n        };\n    });\n\n    return (\n        <div className={\"Page-Character\"}>\n            <EntryDataTable header={\"Personal Data\"} rows={personalDataRow}/>\n            <EntryDataTable header={\"Homeworld\"} rows={homeworldDataRow} smallSize={true}/>\n            {vehiclesDataRow.length > 0?<EntryDataTable header={\"Vehicles\"} rows={vehiclesDataRow} smallSize={true}/>:null}\n            {starshipsDataRow.length > 0?<EntryDataTable header={\"Starships\"} rows={starshipsDataRow} smallSize={true}/>:null}\n            {speciesDataRow.length > 0?<EntryDataTable header={\"Spieces\"} rows={speciesDataRow} smallSize={true}/>:null}\n        </div>\n    );\n}\n\nCharacter.propTypes = {\n    content: PropTypes.object,\n    loadEntryFunction: PropTypes.func\n};\nCharacter.defaultProps = {\n};\n\nexport default Character;\n","import React from 'react';\nimport \"./style.scss\"\nimport PropTypes from 'prop-types';\nimport {requestTypes} from \"../../Common/Services/Swapi/settings\";\nimport EntryDataTable from \"../../Common/Components/EntryDataTable/EntryDataTable\";\n\nconst Planet = ({content, loadEntryFunction}) => {\n    const personalDataRow = [\n        {\n            requestType: requestTypes.planets,\n            renderImage: true,\n            image: content.img,\n            informations: [\n                {key: \"Name\", value: content.name},\n                {key: \"Diameter\", value: content.diameter},\n                {key: \"Gravity\", value: content.gravity},\n                {key: \"Orbital period\", value: content.orbital_period},\n                {key: \"Rotation period\", value: content.rotation_period},\n                {key: \"Climate\", value: content.climate},\n                {key: \"Terrain\", value: content.terrain},\n                {key: \"Surface water\", value: content.surface_water===1?\"Available\":\"Not available\"},\n                {key: \"Population\", value: content.population},\n                ]\n        }\n    ];\n    const residentsDataRow = content.residents.map((resident)=>{\n        if(typeof resident == 'string'){ return {}; }\n        return {\n            requestType: requestTypes.people,\n            renderImage: true,\n            image: resident.img,\n            informations: [\n                {value: resident.label}\n            ],\n            onClick: () => {loadEntryFunction(requestTypes.people, resident.url);}\n        };\n    });\n\n    return (\n        <div className={\"Page-Planet\"}>\n            <EntryDataTable header={\"Informations\"} rows={personalDataRow}/>\n            <EntryDataTable header={\"Residents\"} rows={residentsDataRow} smallSize={true}/>\n        </div>\n    );\n}\n\nPlanet.propTypes = {\n    content: PropTypes.object,\n    loadEntryFunction: PropTypes.func\n};\nPlanet.defaultProps = {\n};\n\nexport default Planet;\n","import React from 'react';\nimport \"./style.scss\"\nimport PropTypes from 'prop-types';\nimport {requestTypes} from \"../../Common/Services/Swapi/settings\";\nimport EntryDataTable from \"../../Common/Components/EntryDataTable/EntryDataTable\";\n\nconst Vehicle = ({content, loadEntryFunction}) => {\n    const personalDataRow = [\n        {\n            requestType: requestTypes.vehicles,\n            renderImage: true,\n            image: content.img,\n            informations: [\n                {key: \"Name\", value: content.name},\n                {key: \"Manufacturer\", value: content.manufacturer},\n                {key: \"Model\", value: content.model},\n                {key: \"Class\", value: content.vehicle_class},\n                {key: \"Crew\", value: content.crew},\n                {key: \"Passengers\", value: content.passengers},\n                {key: \"Length\", value: content.length},\n                {key: \"Cargo capacity\", value: content.cargo_capacity},\n                {key: \"Max atmosphering speed\", value: content.max_atmosphering_speed},\n                {key: \"Consumables\", value: content.consumables},\n                {key: \"Cost in credits\", value: content.cost_in_credits},\n                ]\n        }\n    ];\n\n    const pilotsDataRow = content.pilots.map((pilot)=>{\n        if(typeof pilot == 'string'){ return {}; }\n        return {\n            requestType: requestTypes.people,\n            renderImage: true,\n            image: pilot.img,\n            informations: [\n                {value: pilot.label}\n            ],\n            onClick: () => {loadEntryFunction(requestTypes.people, pilot.url);}\n        };\n    });\n\n    return (\n        <div className={\"Page-Vehicles\"}>\n            <EntryDataTable header={\"Informations\"} rows={personalDataRow}/>\n            <EntryDataTable header={\"Pilots\"} rows={pilotsDataRow} smallSize={true}/>\n        </div>\n    );\n}\n\nVehicle.propTypes = {\n    content: PropTypes.object,\n    loadEntryFunction: PropTypes.func\n};\nVehicle.defaultProps = {\n};\n\nexport default Vehicle;\n","import React from 'react';\nimport \"./style.scss\"\nimport PropTypes from 'prop-types';\nimport {requestTypes} from \"../../Common/Services/Swapi/settings\";\nimport EntryDataTable from \"../../Common/Components/EntryDataTable/EntryDataTable\";\n\nconst Starship = ({content, loadEntryFunction}) => {\n    const personalDataRow = [\n        {\n            requestType: requestTypes.starships,\n            renderImage: true,\n            image: content.img,\n            informations: [\n                {key: \"Name\", value: content.name},\n                {key: \"Manufacturer\", value: content.manufacturer},\n                {key: \"Model\", value: content.model},\n                {key: \"Class\", value: content.starship_class},\n                {key: \"Crew\", value: content.crew},\n                {key: \"Passengers\", value: content.passengers},\n                {key: \"Length\", value: content.length},\n                {key: \"Cargo capacity\", value: content.cargo_capacity},\n                {key: \"Max atmosphering speed\", value: content.max_atmosphering_speed},\n                {key: \"Hyperdrive Rating\", value: content.hyperdrive_rating},\n                {key: \"Consumables\", value: content.consumables},\n                {key: \"Cost in credits\", value: content.cost_in_credits},\n                ]\n        }\n    ];\n\n    const pilotsDataRow = content.pilots.map((pilot)=>{\n        if(typeof pilot == 'string'){ return {}; }\n        return {\n            requestType: requestTypes.people,\n            renderImage: true,\n            image: pilot.img,\n            informations: [\n                {value: pilot.label}\n            ],\n            onClick: () => {loadEntryFunction(requestTypes.people, pilot.url);}\n        };\n    });\n\n    return (\n        <div className={\"Page-Vehicles\"}>\n            <EntryDataTable header={\"Informations\"} rows={personalDataRow}/>\n            <EntryDataTable header={\"Pilots\"} rows={pilotsDataRow} smallSize={true}/>\n        </div>\n    );\n}\n\nStarship.propTypes = {\n    content: PropTypes.object,\n    loadEntryFunction: PropTypes.func\n};\nStarship.defaultProps = {\n};\n\nexport default Starship;\n","import React from 'react';\nimport \"./style.scss\"\nimport PropTypes from 'prop-types';\nimport {requestTypes} from \"../../Common/Services/Swapi/settings\";\nimport EntryDataTable from \"../../Common/Components/EntryDataTable/EntryDataTable\";\n\nconst Species = ({content, loadEntryFunction}) => {\n    const personalDataRow = [\n        {\n            requestType: requestTypes.vehicles,\n            renderImage: false,\n            image: content.img,\n            informations: [\n                {key: \"Spiecies name\", value: content.name},\n                {key: \"Classification\", value: content.classification},\n                {key: \"Designation\", value: content.designation},\n                {key: \"Homeworld\", value: content.homeworld.label},\n                {key: \"Language\", value: content.language},\n                {key: \"Average height\", value: content.average_height},\n                {key: \"Average lifespan\", value: content.average_lifespan},\n                {key: \"Eye colors\", value: content.eye_colors},\n                {key: \"Hair colors\", value: content.hair_colors},\n                {key: \"Skin colors\", value: content.skin_colors},\n                ]\n        }\n    ];\n\n    const peopleDataRow = content.people.map((character)=>{\n        if(typeof character == 'string'){ return {}; }\n        return {\n            requestType: requestTypes.people,\n            renderImage: true,\n            image: character.img,\n            informations: [\n                {value: character.label}\n            ],\n            onClick: () => {loadEntryFunction(requestTypes.people, character.url);}\n        };\n    });\n\n    return (\n        <div className={\"Page-Vehicles\"}>\n            <EntryDataTable header={\"Informations\"} rows={personalDataRow}/>\n            <EntryDataTable header={\"Known characters\"} rows={peopleDataRow} smallSize={true}/>\n        </div>\n    );\n}\n\nSpecies.propTypes = {\n    content: PropTypes.object,\n    loadEntryFunction: PropTypes.func\n};\nSpecies.defaultProps = {\n};\n\nexport default Species;\n","import React from 'react';\nimport \"./style.scss\"\nimport PropTypes from 'prop-types';\nimport HolocronImage from './holocron.png';\nimport {requestTypes} from \"../../Common/Services/Swapi/settings\";\nimport Character from \"../../Pages/Character/Character\";\nimport Planet from \"../../Pages/Planet/Planet\";\nimport Vehicle from \"../../Pages/Vehicles/Vehicle\";\nimport Starship from \"../../Pages/Starships/Starship\";\nimport Species from \"../../Pages/Species/Species\";\n\nconst Entry = ({content, loadEntryFunction}) => {\n    if (content === undefined || content === null){\n        return(\n            <div className={\"EntryEmpty\"}>\n                <p>\n                    <img src={HolocronImage} alt={\"Holocron\"}/><br/>\n                    No entry selected. Holocron inactive.\n                </p>\n            </div>\n        );\n    } else {\n        let componentToRender = \"\";\n        switch (content.requestConfig.type) {\n            case requestTypes.people:\n                componentToRender = <Character content={content} loadEntryFunction={loadEntryFunction}/>;\n                break;\n            case requestTypes.planets:\n                componentToRender = <Planet content={content} loadEntryFunction={loadEntryFunction}/>;\n                break;\n            case requestTypes.vehicles:\n                componentToRender = <Vehicle content={content} loadEntryFunction={loadEntryFunction}/>;\n                break;\n            case requestTypes.starships:\n                componentToRender = <Starship content={content} loadEntryFunction={loadEntryFunction}/>;\n                break;\n            case requestTypes.species:\n                componentToRender = <Species content={content} loadEntryFunction={loadEntryFunction}/>;\n                break;\n            default:\n                componentToRender = \"\";\n                break;\n        }\n        return (\n            <div className={\"Entry\"}>\n                {componentToRender}\n            </div>\n        );\n    }\n}\n\nEntry.propTypes = {\n    content: PropTypes.object,\n    loadEntryFunction: PropTypes.func\n};\nEntry.defaultProps = {\n    contentList: null\n};\n\nexport default Entry;\n","const QuotesList = [\r\n    {\r\n        quote: \"It’s not my fault.\",\r\n        author: \"Han Solo\",\r\n    },\r\n    {\r\n        quote: \"Your focus determines your reality.\",\r\n        author: \"Qui-Gon Jinn\",\r\n    },\r\n    {\r\n        quote: \"Do. Or do not. There is no try.\",\r\n        author: \"Yoda\",\r\n    },\r\n    {\r\n        quote:\"Somebody has to save our skins.\",\r\n        author:\"Leia Organa\"\r\n    },\r\n    {\r\n        quote:\"In my experience there is no such thing as luck.\",\r\n        author:\"Obi-Wan Kenobi\"\r\n    },\r\n    {\r\n        quote:\"I find your lack of faith disturbing.\",\r\n        author:\"Darth Vader\"\r\n    },\r\n    {\r\n        quote:\"It’s a trap!\",\r\n        author:\"Admiral Ackbar\"\r\n    },\r\n    {\r\n        quote:\"So this is how liberty dies…with thunderous applause.\",\r\n        author:\"Padmé Amidala\"\r\n    },\r\n    {\r\n        quote:\"Your eyes can deceive you. Don’t trust them.\",\r\n        author:\"Obi-Wan Kenobi\"\r\n    },\r\n    {\r\n        quote:\"Never tell me the odds.\",\r\n        author:\"Han Solo\"\r\n    },\r\n    {\r\n        quote:\"Mind tricks don’t work on me.\",\r\n        author:\"Watto\"\r\n    },\r\n    {\r\n        quote:\"Great, kid. Don’t get cocky.\",\r\n        author:\"Han Solo\"\r\n    },\r\n    {\r\n        quote:\"Stay on target.\",\r\n        author:\"Gold Five\"\r\n    },\r\n    {\r\n        quote:\"This is a new day, a new beginning.\",\r\n        author:\"Ahsoka Tano\"\r\n    },\r\n    {\r\n        quote:\"Luke, I am your father.\",\r\n        author:\"Darth Vader\"\r\n    }\r\n];\r\nexport default QuotesList;","import React from 'react';\r\nimport \"./style.scss\"\r\nimport PropTypes from 'prop-types';\r\nimport QuotesList from \"./QuotesList\";\r\n\r\nconst Quotes = ({style}) => {\r\n    const quote = QuotesList[Math.floor(Math.random() * QuotesList.length)];\r\n    return (\r\n        <blockquote className={\"Quotes\"} style={style}>\r\n\r\n            <p className={\"Quotes-Quote\"}>{quote.quote}</p>\r\n            <p className={\"Quotes-Author\"}>{quote.author}</p>\r\n        </blockquote>\r\n    );\r\n}\r\n\r\nQuotes.propTypes = {\r\n    contentList: PropTypes.object,\r\n    onEntryClick: PropTypes.func\r\n};\r\nQuotes.defaultProps = {\r\n    contentList: {}\r\n};\r\n\r\nexport default Quotes;\r\n","import React, {useEffect, useState} from 'react';\nimport './App.scss';\nimport Loading from \"./Common/Components/Loading/Loading\";\nimport AnimatedBackground from \"./Layout/AnimatedBackground/AnimatedBackground\";\nimport TabWindow from \"./Common/Components/TabWindow/TabWindow\";\nimport SlidingContainer, {SlideTypes} from \"./Layout/SlidingContainer/SlidingContainer\";\nimport Swapi from \"./Common/Services/Swapi\";\nimport EntriesMenu from \"./Layout/EntriesMenu/EntriesMenu\";\nimport Entry from \"./Layout/Entry/Entry\";\nimport Quotes from \"./Layout/Quotes/Quotes\";\nimport {requestTypes} from \"./Common/Services/Swapi/settings\";\n\nfunction App() {\n    const [initialLoading, setInitialLoading] = useState(true);\n    const [entriesMenuLoading, setEntriesMenuLoading] = useState(false);\n    const [contentLoading, setContentLoading] = useState(false);\n    const [contentList, setContentList] = useState({});\n    const [content, setContent] = useState(null);\n\n    const LoadEntriesList = (type, pageNumber) => {\n        setEntriesMenuLoading(true);\n        Swapi.GetListByType(type, pageNumber, (data)=>{\n            setContentList({...data, page: pageNumber});\n            setEntriesMenuLoading(false);\n        })\n    }\n\n    const ApplyContent = (data) =>{\n        setContent(data);\n        setContentLoading(false);\n    }\n    const loadEntry = (type, url) => {\n        setContentLoading(true);\n        Swapi.GetByTypeUrl(type, url, ApplyContent, true);\n    }\n\n    useEffect(()=>{\n        Swapi.People.GetAll(1, (data)=>{\n            setContentList({...data, page: 1});\n            setTimeout(()=>{\n                setInitialLoading(false);\n                setEntriesMenuLoading(false);\n            }, 1000);\n        })\n    }, []);\n\n    const buttons = [\n        {\n            label: \"Characters\",\n            onClick: () => {LoadEntriesList(requestTypes.people, 1)}\n        },\n        {\n            label: \"Planets\",\n            onClick: () => {LoadEntriesList(requestTypes.planets, 1)}\n        },\n        {\n            label: \"Vehicles\",\n            onClick: () => {LoadEntriesList(requestTypes.vehicles, 1)}\n        }\n    ];\n\n    return (\n    <div className=\"App\">\n        <AnimatedBackground animate={!initialLoading}/>\n\n        <div className={\"SiteContent\"}>\n            <SlidingContainer slideType={SlideTypes.FromLeft} opened={!initialLoading} style={{width: \"400px\", marginTop: \"30px\"}}>\n                <TabWindow buttons={buttons}>\n                    <EntriesMenu contentList={contentList} entriesListLoadingFunction={LoadEntriesList} onEntryClick={loadEntry} style={{height: \"calc(100% - 60px)\"}}/>\n                    <Quotes style={{height: \"60px\"}}/>\n                    <Loading loading={entriesMenuLoading}/>\n                </TabWindow>\n            </SlidingContainer>\n            <SlidingContainer slideType={SlideTypes.FromRight} opened={!initialLoading} style={{width: \"calc(100% - 400px)\"}}>\n                <TabWindow buttons={[]}>\n                    <Entry content={content} loadEntryFunction={loadEntry}/>\n                    <Loading loading={contentLoading}/>\n                </TabWindow>\n            </SlidingContainer>\n        </div>\n\n        <Loading loading={initialLoading}/>\n    </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}